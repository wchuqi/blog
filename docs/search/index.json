[{"content":"https://algo.itcharge.cn/\nhttps://chat.qwen.ai/\n算法\r常用数据结构\u0026amp;API\r1 2 3 4 5 // List\u0026lt;Integer\u0026gt; -\u0026gt; int[] List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); int[] res_1 = res.stream() .mapToInt(Number::intValue) // Integer转int .toArray(); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // 在 Java 17 中，将 Deque\u0026lt;Character\u0026gt; 转换为 String Deque\u0026lt;Character\u0026gt; deque = new ArrayDeque\u0026lt;\u0026gt;(); deque.add(\u0026#39;H\u0026#39;); deque.add(\u0026#39;e\u0026#39;); deque.add(\u0026#39;l\u0026#39;); deque.add(\u0026#39;l\u0026#39;); deque.add(\u0026#39;o\u0026#39;); ✅ 优点：性能好、内存利用率高、适合大字符集。 StringBuilder sb = new StringBuilder(); for (char c : deque) { sb.append(c); } String result = sb.toString(); System.out.println(result); // \u0026#34;Hello\u0026#34; ✅ 优点：代码简洁，适合函数式编程风格 ⚠️ 注意：性能略低于 StringBuilder，小数据量无感 String result = deque.stream() .map(String::valueOf) // 将 Character 转为 String .collect(Collectors.joining()); System.out.println(result); // \u0026#34;Hello\u0026#34; java.util.HashMap\r基于哈希表（Hash Table） 实现的 Map 接口，提供高效的增删改查操作，平均时间复杂度为 O(1)。\n不保证元素的顺序（插入顺序、自然顺序）。\nJDK 8+ 新增的便捷方法（函数式增强）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 获取值，若不存在则返回默认值 getOrDefault(Object key, V defaultValue) // 若键不存在才插入 putIfAbsent(K key, V value) // 若键不存在，则用函数计算值并放入 computeIfAbsent(K key, Function mappingFunction) // 合并值（如统计词频） merge(K key, V value, BiFunction\u0026lt;V,V,V\u0026gt; remappingFunction) // 遍历键值对（函数式） forEach(BiConsumer\u0026lt;K,V\u0026gt;) int count = map.getOrDefault(\u0026#34;orange\u0026#34;, 0); // 如果没有 orange，返回 0 map.putIfAbsent(\u0026#34;apple\u0026#34;, 99); // 只有 apple 不存在时才设置 // 构建 Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; 防止空指针 Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; grouped = new HashMap\u0026lt;\u0026gt;(); grouped.computeIfAbsent(\u0026#34;group1\u0026#34;, k -\u0026gt; new ArrayList\u0026lt;\u0026gt;()) .add(\u0026#34;item1\u0026#34;); Map\u0026lt;String, Integer\u0026gt; wordCount = new HashMap\u0026lt;\u0026gt;(); String[] words = {\u0026#34;hello\u0026#34;, \u0026#34;world\u0026#34;, \u0026#34;hello\u0026#34;, \u0026#34;java\u0026#34;}; for (String word : words) { wordCount.merge(word, 1, Integer::sum); } // 结果: {hello=2, world=1, java=1} map.forEach((key, value) -\u0026gt; System.out.println(key + \u0026#34;: \u0026#34; + value)); java.util.TreeMap\r基于红黑树（Red-Black Tree）实现的有序映射（SortedMap），它会根据键（key）的自然顺序或自定义比较器进行排序。\n适用场景\n需要按键有序存储（如排行榜、时间轴） 范围查询（如查找 10~50 分之间的学生） 查找“最接近”的键（floorKey, ceilingKey） 实现 LRU 缓存的有序管理（配合双向链表） 基础增删查改\n1 2 3 4 5 6 7 put(K key, V value)\t// 插入键值对，若键已存在则替换值 get(Object key)\t// 获取指定键的值，不存在返回null remove(Object key)\t// 删除指定键的映射 containsKey(Object key)\t// 判断是否包含某个键 containsValue(Object value)\t// 判断是否包含某个值（较慢，O(n)） size()\t// 返回映射数量 isEmpty()\t// 是否为空 有序性相关方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 firstKey()/firstEntry()\t// 返回最小键 / 最小键值对 lastKey()/lastEntry()\t// 返回最大键 / 最大键值对 lowerKey(K key)/lowerEntry(K key)\t// 返回小于给定键的最大键及其映射 floorKey(K key)/floorEntry(K key)\t// 返回小于等于给定键的最大键 ceilingKey(K key)/ceilingEntry(K key)\t// 返回大于等于给定键的最小键 higherKey(K key)/higherEntry(K key)\t// 返回大于给定键的最小键 pollFirstEntry()\t// 获取并移除最小键值对 pollLastEntry()\t// 获取并移除最大键值对 TreeMap\u0026lt;Integer, String\u0026gt; map = new TreeMap\u0026lt;\u0026gt;(); map.put(10, \u0026#34;A\u0026#34;); map.put(20, \u0026#34;B\u0026#34;); map.put(30, \u0026#34;C\u0026#34;); System.out.println(map.firstKey()); // 10 System.out.println(map.lastKey()); // 30 System.out.println(map.lowerKey(25)); // 20 System.out.println(map.ceilingKey(25)); // 30 System.out.println(map.floorKey(20)); // 20 System.out.println(map.higherKey(20)); // 30 System.out.println(map.pollFirstEntry()); // 10=A System.out.println(map.size()); // 2 子映射（Submap）操作\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 subMap(K fromKey, K toKey)\t// 返回[fromKey, toKey)范围的视图 headMap(K toKey)\t// 返回小于toKey的所有键的视图 tailMap(K fromKey)\t// 返回大于等于fromKey的所有键的视图 subMap(K from, boolean inclusive, K to, boolean inclusive)\t// 可指定是否包含边界 TreeMap\u0026lt;Integer, String\u0026gt; map = new TreeMap\u0026lt;\u0026gt;(); map.put(10, \u0026#34;A\u0026#34;); map.put(20, \u0026#34;B\u0026#34;); map.put(30, \u0026#34;C\u0026#34;); map.put(40, \u0026#34;D\u0026#34;); SortedMap\u0026lt;Integer, String\u0026gt; sub = map.subMap(15, 35); // [20, 30) System.out.println(sub); // {20=B, 30=C} SortedMap\u0026lt;Integer, String\u0026gt; head = map.headMap(25); // \u0026lt; 25 System.out.println(head); // {10=A, 20=B} SortedMap\u0026lt;Integer, String\u0026gt; tail = map.tailMap(30); // \u0026gt;= 30 System.out.println(tail); // {30=C, 40=D} 遍历方式\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 遍历 Entry（推荐） for (Map.Entry\u0026lt;String, Integer\u0026gt; entry : map.entrySet()) { System.out.println(entry.getKey() + \u0026#34;: \u0026#34; + entry.getValue()); } 遍历 Key for (String key : map.keySet()) { System.out.println(key); } 使用 Iterator（可删除） Iterator\u0026lt;Map.Entry\u0026lt;Integer, String\u0026gt;\u0026gt; it = map.entrySet().iterator(); while (it.hasNext()) { Map.Entry\u0026lt;Integer, String\u0026gt; entry = it.next(); if (entry.getValue().equals(\u0026#34;B\u0026#34;)) { it.remove(); // 安全删除 } } java.util.ArrayDeque\r高性能双端队列，性能优于 LinkedList 和旧的 Stack 类。不允许 null\n作为双端队列使用（头尾操作）\n1 2 3 4 5 6 7 8 9 10 offer/poll/peek // 方法更安全，失败时返回 null 或 false，而 add/remove/get 失败抛异常。 addFirst(e)/offerFirst(e)\t// 在头部添加元素 addLast(e)/offerLast(e)\t// 在尾部添加元素 removeFirst()/pollFirst()\t// 移除并返回头部元素 removeLast()/pollLast()\t// 移除并返回尾部元素 getFirst()/peekFirst()\t// 查看头部元素（不删除） getLast()/peekLast()\t// 查看尾部元素（不删除） 作为普通队列使用（FIFO）\n1 2 3 4 5 offer(e)/add(e)\t// 入队（等价于addLast） poll()/remove()\t// 出队（等价于removeFirst） peek()/element()\t// 查看队首 作为栈使用（LIFO）推荐替代 Stack 类\n1 2 3 push(e)\t// 入栈（等价于addFirst） pop()\t// 出栈（等价于removeFirst） peek()\t// 查看栈顶 其他常用方法\n1 2 3 4 5 size()\t// 返回元素个数 isEmpty()\t// 是否为空 contains(Object o)\t// 是否包含某元素 iterator()\t// 返回从头到尾的迭代器 descendingIterator()\t// 返回从尾到头的迭代器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // 创建空的双端队列 ArrayDeque\u0026lt;Integer\u0026gt; deque = new ArrayDeque\u0026lt;\u0026gt;(); // 指定初始容量（可选） ArrayDeque\u0026lt;String\u0026gt; deque2 = new ArrayDeque\u0026lt;\u0026gt;(16); ArrayDeque\u0026lt;Integer\u0026gt; deque = new ArrayDeque\u0026lt;\u0026gt;(); deque.addLast(10); // [10] deque.addLast(20); // [10, 20] deque.addFirst(5); // [5, 10, 20] System.out.println(deque.getFirst()); // 5 System.out.println(deque.getLast()); // 20 System.out.println(deque.removeFirst()); // 5 → [10, 20] System.out.println(deque.removeLast()); // 20 → [10] ArrayDeque\u0026lt;String\u0026gt; queue = new ArrayDeque\u0026lt;\u0026gt;(); queue.offer(\u0026#34;A\u0026#34;); // A queue.offer(\u0026#34;B\u0026#34;); // A B queue.offer(\u0026#34;C\u0026#34;); // A B C while (!queue.isEmpty()) { System.out.print(queue.poll() + \u0026#34; \u0026#34;); // A B C } ArrayDeque\u0026lt;Integer\u0026gt; stack = new ArrayDeque\u0026lt;\u0026gt;(); stack.push(1); // 1 stack.push(2); // 2 1 stack.push(3); // 3 2 1 System.out.println(stack.peek()); // 3 System.out.println(stack.pop()); // 3 System.out.println(stack.pop()); // 2 ArrayDeque\u0026lt;Integer\u0026gt; deque = new ArrayDeque\u0026lt;\u0026gt;(); deque.add(1); // 1 deque.add(2); // 1 2 deque.add(3); // 1 2 3 // 正向遍历 for (Integer n : deque) { System.out.print(n + \u0026#34; \u0026#34;); // 1 2 3 } // 反向遍历（适合栈遍历） Iterator\u0026lt;Integer\u0026gt; it = deque.descendingIterator(); while (it.hasNext()) { System.out.print(it.next() + \u0026#34; \u0026#34;); // 3 2 1 } 用 ArrayDeque 实现回文检查\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import java.util.ArrayDeque; import java.util.Deque; public class PalindromeChecker { public static boolean isPalindrome(String str) { Deque\u0026lt;Character\u0026gt; deque = new ArrayDeque\u0026lt;\u0026gt;(); String cleaned = str.toLowerCase().replaceAll(\u0026#34;[^a-z0-9]\u0026#34;, \u0026#34;\u0026#34;); for (char c : cleaned.toCharArray()) { deque.addLast(c); } while (deque.size() \u0026gt; 1) { if (!deque.removeFirst().equals(deque.removeLast())) { return false; } } return true; } public static void main(String[] args) { System.out.println(isPalindrome(\u0026#34;A man a plan a canal Panama\u0026#34;)); // true System.out.println(isPalindrome(\u0026#34;race a car\u0026#34;)); // false } } java.util.Arrays\r排序前记得 sort()，否则 binarySearch() 结果错误。 修改 asList() 返回的 List 会抛异常，如需修改请用 new ArrayList\u0026lt;\u0026gt;(Arrays.asList(arr))。 多维数组比较用 deepEquals()，打印用 deepToString()。 大数据量处理优先使用 Arrays.stream() 配合 Lambda。 用途：将一维数组转换为可读的字符串格式。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 int[] arr = {3, 1, 4, 1, 5}; System.out.println(Arrays.toString(arr)); // 输出: [3, 1, 4, 1, 5] int[] arr = {3, 1, 4, 1, 5}; Arrays.sort(arr); System.out.println(Arrays.toString(arr)); // [1, 1, 3, 4, 5] Arrays.deepToString(multiArray) 用途：打印多维数组（如二维数组）。 int[][] matrix = {{1, 2}, {3, 4}, {5, 6}}; System.out.println(Arrays.deepToString(matrix)); // [[1, 2], [3, 4], [5, 6]] 用途：对数组进行排序（升序），使用优化的快速排序/归并排序算法。 // 字符串数组排序（字典序） String[] strs = {\u0026#34;Java\u0026#34;, \u0026#34;C++\u0026#34;, \u0026#34;Python\u0026#34;}; Arrays.sort(strs); System.out.println(Arrays.toString(strs)); // [C++, Java, Python] 自定义排序（配合 Comparator） Integer[] nums = {3, 1, 4, 1, 5}; Arrays.sort(nums, Collections.reverseOrder()); // 降序 System.out.println(Arrays.toString(nums)); // [5, 4, 3, 1, 1] Arrays.binarySearch(array, key) 用途：在已排序的数组中使用二分查找，返回目标元素的索引，找不到返回负值。 int[] arr = {1, 3, 4, 5, 7, 9}; int index = Arrays.binarySearch(arr, 5); System.out.println(\u0026#34;5 的索引: \u0026#34; + index); // 3 int notFound = Arrays.binarySearch(arr, 6); System.out.println(\u0026#34;6 的索引: \u0026#34; + notFound); // -5（插入点为 -(-5)-1=4） Arrays.copyOf(original, newLength) 用途：复制数组，可以指定新长度（支持扩容或截断）。 int[] arr = {1, 2, 3}; int[] copy = Arrays.copyOf(arr, 5); // 扩容到5，补0 System.out.println(Arrays.toString(copy)); // [1, 2, 3, 0, 0] int[] shorter = Arrays.copyOf(arr, 2); // 截断 System.out.println(Arrays.toString(shorter)); // [1, 2] Arrays.copyOfRange(original, from, to) 用途：复制数组的指定范围 [from, to)（左闭右开）。 int[] arr = {1, 2, 3, 4, 5}; int[] range = Arrays.copyOfRange(arr, 1, 4); System.out.println(Arrays.toString(range)); // [2, 3, 4] Arrays.equals(array1, array2) 用途：判断两个数组是否“相等”（长度相同且对应元素相等）。 int[] a = {1, 2, 3}; int[] b = {1, 2, 3}; System.out.println(Arrays.equals(a, b)); // true int[] c = {1, 2}; System.out.println(Arrays.equals(a, c)); // false Arrays.fill(array, value) 用途：用指定值填充整个数组或部分范围。 int[] arr = new int[5]; Arrays.fill(arr, 7); System.out.println(Arrays.toString(arr)); // [7, 7, 7, 7, 7] // 填充部分 Arrays.fill(arr, 1, 4, 9); // 索引 [1,4) 填为 9 System.out.println(Arrays.toString(arr)); // [7, 9, 9, 9, 7] Arrays.asList(array) 用途：将数组转换为 List，但注意：返回的是固定大小的 List，不能增删元素。 String[] strs = {\u0026#34;Java\u0026#34;, \u0026#34;Python\u0026#34;, \u0026#34;Go\u0026#34;}; List\u0026lt;String\u0026gt; list = Arrays.asList(strs); System.out.println(list); // [Java, Python, Go] // ❌ list.add(\u0026#34;Rust\u0026#34;); // 抛出 UnsupportedOperationException Arrays.stream(array)（Java 8+） 用途：将数组转换为 Stream，便于使用函数式编程。 int[] numbers = {1, 2, 3, 4, 5}; int sum = Arrays.stream(numbers).sum(); System.out.println(\u0026#34;总和: \u0026#34; + sum); // 15 // 过滤并打印偶数 Arrays.stream(numbers) .filter(n -\u0026gt; n % 2 == 0) .forEach(System.out::println); java.util.TreeSet\r特点：\n有序（默认自动升序） 去重集合 不允许null 插入、删除、查找时间复杂度：O(log n) 基本操作\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 add(E e)\t// 添加元素 remove(Object o)\t// 删除元素 contains(Object o)\t// 判断是否包含元素 size()\t// 返回元素个数 isEmpty()\t// 是否为空 Set\u0026lt;Integer\u0026gt; set_1 = new TreeSet\u0026lt;\u0026gt;(); set_1.add(3); set_1.add(1); set_1.add(2); System.out.println(set_1); // [1, 2, 3] Set\u0026lt;Integer\u0026gt; set_2 = new TreeSet\u0026lt;\u0026gt;(new Comparator\u0026lt;Integer\u0026gt;() { @Override public int compare(Integer o1, Integer o2) { return o2 - o1; } }); // 或者 // Set\u0026lt;Integer\u0026gt; set_2 = new TreeSet\u0026lt;\u0026gt;((o1, o2) -\u0026gt; o2 - o1); // TreeSet\u0026lt;Integer\u0026gt; set_2 = new TreeSet\u0026lt;\u0026gt;((a, b) -\u0026gt; b.compareTo(a)); set_2.add(1); set_2.add(3); set_2.add(2); System.out.println(set_2); // [3, 2, 1] System.out.println(\u0026#34;集合: \u0026#34; + set); // [5, 10, 20] System.out.println(\u0026#34;大小: \u0026#34; + set.size()); // 3 System.out.println(\u0026#34;包含10? \u0026#34; + set.contains(10)); // true set.remove(20); 排序相关方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 first()\t// 返回最小元素 last()\t// 返回最大元素 headSet(E toElement)\t// 返回小于toElement的子集（不包含 toElement） tailSet(E fromElement)\t// 返回大于等于fromElement的子集 subSet(E from, E to)\t// 返回[from, to)范围内的子集 TreeSet\u0026lt;Integer\u0026gt; set = new TreeSet\u0026lt;\u0026gt;(); set.addAll(Arrays.asList(5, 10, 15, 20, 25)); System.out.println(\u0026#34;最小值: \u0026#34; + set.first()); // 5 System.out.println(\u0026#34;最大值: \u0026#34; + set.last()); // 25 System.out.println(\u0026#34;小于15: \u0026#34; + set.headSet(15)); // [5, 10] System.out.println(\u0026#34;大于等于15: \u0026#34; + set.tailSet(15)); // [15, 20, 25] System.out.println(\u0026#34;10到20之间: \u0026#34; + set.subSet(10, 20)); // [10, 15] 实用方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 lower(E e)\t// 返回小于e的最大元素，不存在则返回null floor(E e)\t// 返回小于等于e的最大元素 higher(E e)\t// 返回大于e的最小元素 ceiling(E e)\t// 返回大于等于e的最小元素 pollFirst()\t// 获取并移除最小元素 pollLast()\t// 获取并移除最大元素 TreeSet\u0026lt;Integer\u0026gt; set = new TreeSet\u0026lt;\u0026gt;(); set.addAll(Arrays.asList(5, 10, 15, 20)); System.out.println(\u0026#34;lower(12): \u0026#34; + set.lower(12)); // 10 System.out.println(\u0026#34;floor(10): \u0026#34; + set.floor(10)); // 10 System.out.println(\u0026#34;higher(12): \u0026#34; + set.higher(12)); // 15 System.out.println(\u0026#34;ceiling(10): \u0026#34; + set.ceiling(10)); // 10 System.out.println(\u0026#34;弹出最小: \u0026#34; + set.pollFirst()); // 5 System.out.println(\u0026#34;当前集合: \u0026#34; + set); // [10, 15, 20] System.out.println(\u0026#34;弹出最大: \u0026#34; + set.pollLast()); // 20 System.out.println(\u0026#34;当前集合: \u0026#34; + set); // [10, 15] 遍历方式\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 TreeSet\u0026lt;Integer\u0026gt; set = new TreeSet\u0026lt;\u0026gt;(Arrays.asList(3, 1, 4, 1, 5)); // 方式1：增强 for 循环 for (Integer num : set) { System.out.print(num + \u0026#34; \u0026#34;); // 1 3 4 5 } // 方式2：迭代器（升序） Iterator\u0026lt;Integer\u0026gt; it = set.iterator(); while (it.hasNext()) { System.out.print(it.next() + \u0026#34; \u0026#34;); } // 方式3：降序遍历 Iterator\u0026lt;Integer\u0026gt; descIt = set.descendingIterator(); while (descIt.hasNext()) { System.out.print(descIt.next() + \u0026#34; \u0026#34;); // 5 4 3 1 } ","date":"2025-08-17T00:00:00Z","image":"https://wchuqi.github.io/p/algo/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://wchuqi.github.io/p/algo/","title":"Algo"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings\rThe following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1\rH2\rH3\rH4\rH5\rH6\rParagraph\rXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes\rThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution\rTiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution\rDon\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables\rTables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables\rItalics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks\rCode block with backticks\r1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces\r\u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block with Hugo\u0026rsquo;s internal highlight shortcode\r1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block\r1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types\rOrdered List\rFirst item Second item Third item Unordered List\rList item Another item And another item Nested list\rFruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark\rGIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image\rThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://wchuqi.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://wchuqi.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode\rTwitter Simple Shortcode\rVimeo Simple Shortcode\rbilibilibi Shortcode\rGist Shortcode\rGitlab Snippets Shortcode\rQuote Shortcode\rStack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://wchuqi.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt\rThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat\rVicta caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://wchuqi.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://wchuqi.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples\rInline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$\r\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://wchuqi.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://wchuqi.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://wchuqi.github.io/p/emoji-support/","title":"Emoji Support"}]